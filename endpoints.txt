This is a list of functions in the DeviantArtFs library that call DeviantArt / Sta.sh API endpoints.

Methods that return an Async<T> are intended for use from F#, and methods that return a Task<T> can be used from async methods in C# and VB.NET.

"???" indicates a type generated from a JSON sample by FSharp.Data's JsonProvider.

"long" indicates a 64-bit integer ("int64" in F#.)

DeviantArtFs.DeviantArtAuth
* AsyncGetToken (string) (Uri) -> Async<IDeviantArtRefreshToken>
* AsyncRefresh (string) -> Async<IDeviantArtRefreshToken>
* GetTokenAsync (string) (Uri) -> Task<IDeviantArtRefreshToken>
* RefreshAsync (string) -> Task<IDeviantArtRefreshToken>

DeviantArtFs.Requests.Browse.CategoryTree
* AsyncExecute (IDeviantArtAccessToken) (CategoryTreeRequest) -> Async<IEnumerable<???>>
* ExecuteAsync (IDeviantArtAccessToken) (CategoryTreeRequest) -> Task<IEnumerable<ICategory>>

DeviantArtFs.Requests.Browse.DailyDeviations
* AsyncExecute (IDeviantArtAccessToken) (DailyDeviationsRequest) -> Async<IEnumerable<???>>
* ExecuteAsync (IDeviantArtAccessToken) (DailyDeviationsRequest) -> Task<IEnumerable<Deviation>>

DeviantArtFs.Requests.Browse.Hot
* AsyncExecute (IDeviantArtAccessToken) (HotRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (HotRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Browse.MoreLikeThis
* AsyncExecute (IDeviantArtAccessToken) (MoreLikeThisRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (MoreLikeThisRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Browse.MoreLikeThisPreview
* AsyncExecute (IDeviantArtAccessToken) (Guid) -> Async<MoreLikeThisResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (Guid) -> Task<MoreLikeThisResult<Deviation>>

DeviantArtFs.Requests.Browse.Newest
* AsyncExecute (IDeviantArtAccessToken) (NewestRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (NewestRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Browse.Popular
* AsyncExecute (IDeviantArtAccessToken) (PopularRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (PopularRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Browse.Tags
* AsyncExecute (IDeviantArtAccessToken) (TagsRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (TagsRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Browse.TagsSearch
* AsyncExecute (IDeviantArtAccessToken) (string) -> Async<IEnumerable<string>>
* ExecuteAsync (IDeviantArtAccessToken) (string) -> Task<IEnumerable<string>>

DeviantArtFs.Requests.Browse.Undiscovered
* AsyncExecute (IDeviantArtAccessToken) (UndiscoveredRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (UndiscoveredRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Browse.UserJournals
* AsyncExecute (IDeviantArtAccessToken) (UserJournalsRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (UserJournalsRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Data.Countries
* AsyncExecute (IDeviantArtAccessToken) -> Async<IEnumerable<???>>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<IDictionary<int, string>>

DeviantArtFs.Requests.Data.Privacy
* AsyncExecute (IDeviantArtAccessToken) -> Async<string>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<string>

DeviantArtFs.Requests.Data.Submission
* AsyncExecute (IDeviantArtAccessToken) -> Async<string>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<string>

DeviantArtFs.Requests.Data.Tos
* AsyncExecute (IDeviantArtAccessToken) -> Async<string>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<string>

DeviantArtFs.Requests.Deviation.Content
* AsyncExecute (IDeviantArtAccessToken) (Guid) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (Guid) -> Task<IContentResult>

DeviantArtFs.Requests.Deviation.DeviationById
* AsyncExecute (IDeviantArtAccessToken) (Guid) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (Guid) -> Task<Deviation>

DeviantArtFs.Requests.Deviation.Download
* AsyncExecute (IDeviantArtAccessToken) (Guid) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (Guid) -> Task<IDeviantArtFile>

DeviantArtFs.Requests.Deviation.EmbeddedContent
* AsyncExecute (IDeviantArtAccessToken) (EmbeddedContentRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (EmbeddedContentRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Deviation.MetadataById
* AsyncExecute (IDeviantArtAccessToken) (MetadataRequest) -> Async<IEnumerable<???>>
* ExecuteAsync (IDeviantArtAccessToken) (MetadataRequest) -> Task<IEnumerable<Metadata>>

DeviantArtFs.Requests.Deviation.WhoFaved
* AsyncExecute (IDeviantArtAccessToken) (WhoFavedRequest) -> Async<DeviantArtPagedResult<WhoFavedUser>>
* ExecuteAsync (IDeviantArtAccessToken) (WhoFavedRequest) -> Task<IDeviantArtPagedResult<WhoFavedUser>>

DeviantArtFs.Requests.Gallery.All
* AsyncExecute (IDeviantArtAccessToken) (AllRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (AllRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Gallery.Folders
* AsyncExecute (IDeviantArtAccessToken) (FoldersRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (FoldersRequest) -> Task<IDeviantArtPagedResult<IDeviantArtFolder>>

DeviantArtFs.Requests.Gallery.FoldersCreate
* AsyncExecute (IDeviantArtAccessToken) (string) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (string) -> Task<IDeviantArtFolder>

DeviantArtFs.Requests.Gallery.FoldersRemove
* AsyncExecute (IDeviantArtAccessToken) (Guid) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (Guid) -> Task

DeviantArtFs.Requests.Gallery.Gallery
* AsyncExecute (IDeviantArtAccessToken) (GalleryRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (GalleryRequest) -> Task<IDeviantArtPagedResult<Deviation>>

DeviantArtFs.Requests.Stash.Contents
* AsyncExecute (IDeviantArtAccessToken) (long) -> Async<DeviantArtPagedResult<???>>
* AsyncGetRoot (IDeviantArtAccessToken) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (long) -> Task<IDeviantArtPagedResult<StashMetadata>>
* GetRootAsync (IDeviantArtAccessToken) -> Task<IDeviantArtPagedResult<StashMetadata>>

DeviantArtFs.Requests.Stash.Delete
* AsyncExecute (IDeviantArtAccessToken) (long) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (long) -> Task

DeviantArtFs.Requests.Stash.Delta
* AsyncExecute (IDeviantArtAccessToken) (DeltaRequest) -> Async<DeltaResult>
* ExecuteAsync (IDeviantArtAccessToken) (DeltaRequest) -> Task<IDeltaResult>

DeviantArtFs.Requests.Stash.Item
* AsyncExecute (IDeviantArtAccessToken) (ItemRequest) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (ItemRequest) -> Task<StashMetadata>

DeviantArtFs.Requests.Stash.Move
* AsyncExecute (IDeviantArtAccessToken) (long) (long) -> Async<MoveResult>
* ExecuteAsync (IDeviantArtAccessToken) (long) (long) -> Task<IMoveResult>

DeviantArtFs.Requests.Stash.Position
* AsyncExecute (IDeviantArtAccessToken) (long) (int) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (long) (int) -> Task

DeviantArtFs.Requests.Stash.Publish
* AsyncExecute (IDeviantArtAccessToken) (PublishRequest) -> Async<PublishResult>
* ExecuteAsync (IDeviantArtAccessToken) (PublishRequest) -> Task<PublishResult>

DeviantArtFs.Requests.Stash.PublishCategoryTree
* AsyncExecute (IDeviantArtAccessToken) (PublishCategoryTreeRequest) -> Async<IEnumerable<???>>
* ExecuteAsync (IDeviantArtAccessToken) (PublishCategoryTreeRequest) -> Task<IEnumerable<ICategory>>

DeviantArtFs.Requests.Stash.PublishUserdata
* AsyncExecute (IDeviantArtAccessToken) -> Async<PublishUserdataResult>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<PublishUserdataResult>

DeviantArtFs.Requests.Stash.Space
* AsyncExecute (IDeviantArtAccessToken) -> Async<SpaceResult>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<SpaceResult>

DeviantArtFs.Requests.Stash.Stack
* AsyncExecute (IDeviantArtAccessToken) (long) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (long) -> Task<StashMetadata>

DeviantArtFs.Requests.Stash.Submit
* AsyncExecute (IDeviantArtAccessToken) (SubmitRequest) -> Async<long>
* ExecuteAsync (IDeviantArtAccessToken) (SubmitRequest) -> Task<long>

DeviantArtFs.Requests.Stash.Update
* AsyncExecute (IDeviantArtAccessToken) (UpdateRequest) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (UpdateRequest) -> Task

DeviantArtFs.Requests.User.dAmnToken
* AsyncExecute (IDeviantArtAccessToken) -> Async<string>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<string>

DeviantArtFs.Requests.User.Friends
* AsyncExecute (IDeviantArtAccessToken) (FriendsRequest) -> Async<DeviantArtPagedResult<FriendRecord>>
* ExecuteAsync (IDeviantArtAccessToken) (FriendsRequest) -> Task<IDeviantArtPagedResult<FriendRecord>>

DeviantArtFs.Requests.User.FriendsSearch
* AsyncExecute (IDeviantArtAccessToken) (FriendsSearchRequest) -> Async<IEnumerable<DeviantArtUser>>
* ExecuteAsync (IDeviantArtAccessToken) (FriendsSearchRequest) -> Task<IEnumerable<DeviantArtUser>>

DeviantArtFs.Requests.User.FriendsUnwatch
* AsyncExecute (IDeviantArtAccessToken) (string) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (string) -> Task

DeviantArtFs.Requests.User.FriendsWatch
* AsyncExecute (IDeviantArtAccessToken) (FriendsWatchRequest) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (FriendsWatchRequest) -> Task

DeviantArtFs.Requests.User.FriendsWatching
* AsyncExecute (IDeviantArtAccessToken) (string) -> Async<bool>
* ExecuteAsync (IDeviantArtAccessToken) (string) -> Task<bool>

DeviantArtFs.Requests.User.ProfileByName
* AsyncExecute (IDeviantArtAccessToken) (ProfileRequest) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (ProfileRequest) -> Task<Profile>

DeviantArtFs.Requests.User.ProfileUpdate
* AsyncExecute (IDeviantArtAccessToken) (ProfileUpdateRequest) -> Async<Unit>
* ExecuteAsync (IDeviantArtAccessToken) (ProfileUpdateRequest) -> Task

DeviantArtFs.Requests.User.StatusesList
* AsyncExecute (IDeviantArtAccessToken) (StatusesListRequest) -> Async<DeviantArtPagedResult<???>>
* ExecuteAsync (IDeviantArtAccessToken) (StatusesListRequest) -> Task<IDeviantArtPagedResult<Status>>

DeviantArtFs.Requests.User.StatusesStatus
* AsyncExecute (IDeviantArtAccessToken) (Guid) -> Async<???>
* ExecuteAsync (IDeviantArtAccessToken) (Guid) -> Task<Status>

DeviantArtFs.Requests.User.StatusPost
* AsyncExecute (IDeviantArtAccessToken) (StatusPostRequest) -> Async<Guid>
* ExecuteAsync (IDeviantArtAccessToken) (StatusPostRequest) -> Task<Guid>

DeviantArtFs.Requests.User.Watchers
* AsyncExecute (IDeviantArtAccessToken) (WatchersRequest) -> Async<DeviantArtPagedResult<WatcherRecord>>
* ExecuteAsync (IDeviantArtAccessToken) (WatchersRequest) -> Task<IDeviantArtPagedResult<WatcherRecord>>

DeviantArtFs.Requests.User.Whoami
* AsyncExecute (IDeviantArtAccessToken) -> Async<DeviantArtUser>
* ExecuteAsync (IDeviantArtAccessToken) -> Task<DeviantArtUser>

DeviantArtFs.Requests.User.Whois
* AsyncExecute (IDeviantArtAccessToken) (IEnumerable<string>) -> Async<IEnumerable<DeviantArtUser>>
* ExecuteAsync (IDeviantArtAccessToken) (IEnumerable<string>) -> Task<IEnumerable<DeviantArtUser>>

DeviantArtFs.Requests.Util.Placebo
* AsyncIsValid (IDeviantArtAccessToken) -> Async<bool>
* IsValidAsync (IDeviantArtAccessToken) -> Task<bool>
